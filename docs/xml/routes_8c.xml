<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="routes_8c" kind="file" language="C++">
    <compoundname>routes.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="routes_8h" local="yes">./routes.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c</label>
        <link refid="routes_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>./routes.h</label>
        <link refid="routes_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>locale.h</label>
      </node>
      <node id="6">
        <label>stdbool.h</label>
      </node>
      <node id="5">
        <label>stdio.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="routes_8c_1a5019e918f68638f5ee193138027405df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
        <definition>Vertex * createRoute</definition>
        <argsstring>()</argsstring>
        <name>createRoute</name>
        <briefdescription>
<para>Creates a new empty graph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to the starting vertex of the graph. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="21" column="8" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1ae87720a58f6d30b7a5ec8c41fe0158e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
        <definition>Vertex * createRouteVertex</definition>
        <argsstring>(char *city, int cod)</argsstring>
        <name>createRouteVertex</name>
        <param>
          <type>char *</type>
          <declname>city</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cod</declname>
        </param>
        <briefdescription>
<para>Creates a new vertex for the graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>city</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the vertex city. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cod</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_vertex" kindref="compound">Vertex</ref> identifier code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the newly created vertex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="33" column="8" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="33" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1a6b02bd0cb67e4175a6ff84da2fc20036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
        <definition>Vertex * insertRouteVertex</definition>
        <argsstring>(Vertex *g, Vertex *new, bool *res)</argsstring>
        <name>insertRouteVertex</name>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>new</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Inserts a new vertex into the graph in alphabetical order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the starting vertex of the graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the new vertex to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a variable that stores the result of the insert operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the starting vertex of the graph. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="53" column="8" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="53" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1a09d7bed5e43bd9d16ee464b0e6ef6d7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void showRoutes</definition>
        <argsstring>(Vertex *g)</argsstring>
        <name>showRoutes</name>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Displays on screen all vertices and their respective adjacency lists of the graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the starting vertex of the graph. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="90" column="6" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="90" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1ac08fd85b0e1d73b8e22eec74d0b38185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
        <definition>Vertex * destroyRoutes</definition>
        <argsstring>(Vertex *g)</argsstring>
        <name>destroyRoutes</name>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Frees the memory allocated to the graph and its adjacency lists. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the starting vertex of the graph. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the starting vertex of the graph (NULL). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="105" column="8" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="105" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1af9a8d20dbd4301590efe66c09c9cad84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int searchCodVertex</definition>
        <argsstring>(Vertex *g, char *city)</argsstring>
        <name>searchCodVertex</name>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>city</declname>
        </param>
        <briefdescription>
<para>Gets the identifier code of a vertex from the city name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the starting vertex of the graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>city</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the city to be searched. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="struct_vertex" kindref="compound">Vertex</ref> identifier code or -1 if the graph is empty, -2 if the city is not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="130" column="5" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="130" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1ab70e1129d2c0c8b9ea3dbb7c779505a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
        <definition>Vertex * searchVertex</definition>
        <argsstring>(Vertex *g, char *city)</argsstring>
        <name>searchVertex</name>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>city</declname>
        </param>
        <briefdescription>
<para>Finds a vertex from the city name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the starting vertex of the graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>city</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the city to be searched. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the found vertex, or NULL if the city is not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="148" column="8" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="148" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1ac54eed9c8e70a3e0ef969900c8872552" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
        <definition>Vertex * searchVertexCod</definition>
        <argsstring>(Vertex *g, int cod)</argsstring>
        <name>searchVertexCod</name>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cod</declname>
        </param>
        <briefdescription>
<para>Fetch a vertex from the identifier code. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the starting vertex of the graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cod</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier code of the vertex to be searched. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the found vertex or NULL if the code is not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="164" column="8" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="164" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1a1a8f75be4e9b363d012459131f3d7ada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
        <definition>Vertex * resetVisitedVertex</definition>
        <argsstring>(Vertex *g)</argsstring>
        <name>resetVisitedVertex</name>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Resets the &quot;visited&quot; flag of all graph vertices to false. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the starting vertex of the graph. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the starting vertex of the graph. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="179" column="8" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="179" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1a73e20349f3e629ccd24d5b9b7c1e3fad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_adj" kindref="compound">Adj</ref> *</type>
        <definition>Adj * createAdj</definition>
        <argsstring>(int cod, float valuedistance)</argsstring>
        <name>createAdj</name>
        <param>
          <type>int</type>
          <declname>cod</declname>
        </param>
        <param>
          <type>float</type>
          <declname>valuedistance</declname>
        </param>
        <briefdescription>
<para>Creates a new adjacency list node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cod</parametername>
</parameternamelist>
<parameterdescription>
<para>Adjacent vertex identifier code. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valuedistance</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of distance between vertices. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the newly created node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="201" column="5" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="201" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1a4994b5d4c5bb2b050655a2d4ef14531b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
        <definition>Vertex * insertAdjacentVertex</definition>
        <argsstring>(Vertex *g, char *origin, char *dest, float valuedistance, bool *res)</argsstring>
        <name>insertAdjacentVertex</name>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>origin</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>float</type>
          <declname>valuedistance</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Inserts a new adjacent vertex into an adjacency list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the starting vertex of the graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>origin</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the city of origin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the destination city. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valuedistance</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of distance between vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a variable that stores the result of the insert operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the starting vertex of the graph. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="222" column="8" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="222" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1aabe0b89e10f88f50df9fc6ee273eea38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
        <definition>Vertex * insertAdjacentVertexCod</definition>
        <argsstring>(Vertex *g, int codOrigin, int codDest, float valuedistance, bool *res)</argsstring>
        <name>insertAdjacentVertexCod</name>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>codOrigin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>codDest</declname>
        </param>
        <param>
          <type>float</type>
          <declname>valuedistance</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Inserts a new adjacent vertex in an adjacency list based on the vertex identifier codes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the starting vertex of the graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codOrigin</parametername>
</parameternamelist>
<parameterdescription>
<para>Code identifying the city of origin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codDest</parametername>
</parameternamelist>
<parameterdescription>
<para>Code identifying the destination city. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valuedistance</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of distance between vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a variable that stores the result of the insert operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the starting vertex of the graph. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="257" column="8" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="257" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1a2aa41a6a2d3caa6e5e43490c296fb32d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool existAdj</definition>
        <argsstring>(Adj *h, int cod)</argsstring>
        <name>existAdj</name>
        <param>
          <type><ref refid="struct_adj" kindref="compound">Adj</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cod</declname>
        </param>
        <briefdescription>
<para>Checks if an adjacent vertex already exists in an adjacency list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first node in the adjacency list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cod</parametername>
</parameternamelist>
<parameterdescription>
<para>Code identifying the adjacent vertex to be searched. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the adjacent vertex exists in the list, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="287" column="6" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="287" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1a251a8ffd0dbbbd4c915eecf69eeed000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_adj" kindref="compound">Adj</ref> *</type>
        <definition>Adj * insertAdj</definition>
        <argsstring>(Adj *h, Adj *new, bool *res)</argsstring>
        <name>insertAdj</name>
        <param>
          <type><ref refid="struct_adj" kindref="compound">Adj</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="struct_adj" kindref="compound">Adj</ref> *</type>
          <declname>new</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Inserts a new adjacent vertex to a given vertex in the graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>The head of the vertex list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new</parametername>
</parameternamelist>
<parameterdescription>
<para>The new adjacent vertex to be inserted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a boolean variable that will be set to true if the insertion is successful. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The head of the vertex list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="304" column="5" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="304" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1a6cdcfff755904515945a32bf205656ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void showAdj</definition>
        <argsstring>(Adj *h)</argsstring>
        <name>showAdj</name>
        <param>
          <type><ref refid="struct_adj" kindref="compound">Adj</ref> *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Recursively displays the adjacent vertices of a given vertex. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>The head of the adjacent vertex list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="332" column="6" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="332" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1a96dc20b046a393d2896ed7e3123a9450" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_adj" kindref="compound">Adj</ref> *</type>
        <definition>Adj * destroyAdj</definition>
        <argsstring>(Adj *h)</argsstring>
        <name>destroyAdj</name>
        <param>
          <type><ref refid="struct_adj" kindref="compound">Adj</ref> *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Recursively destroys the adjacent vertex list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>The head of the adjacent vertex list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="346" column="5" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="346" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1a6dbab8f1d02d69c671fa250132262f4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int countPaths</definition>
        <argsstring>(Vertex *g, int src, int dest, int pathCount)</argsstring>
        <name>countPaths</name>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pathCount</declname>
        </param>
        <briefdescription>
<para>Counts the number of paths between two vertices in the graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>The head of the vertex list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>The code of the source vertex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>The code of the destination vertex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pathCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of paths found so far. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of paths between the source and destination vertices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="371" column="5" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="371" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1a6dc33af1d97003e2d1dd85632d6adf5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int countPathsVertexsName</definition>
        <argsstring>(Vertex *g, char *src, char *dest, int pathCount)</argsstring>
        <name>countPathsVertexsName</name>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pathCount</declname>
        </param>
        <briefdescription>
<para>Counts the number of paths between two vertices in the graph, given their names. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>The head of the vertex list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the source vertex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the destination vertex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pathCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of paths found so far. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of paths between the source and destination vertices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="402" column="5" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="402" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1a08d25e7f746a8921ca8c47af9e9bb4c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool depthFirstSearchRec</definition>
        <argsstring>(Vertex *g, int origin, int dest)</argsstring>
        <name>depthFirstSearchRec</name>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>origin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Recursively performs a depth-first search on the graph to find a path between two vertices. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>The head of the vertex list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>origin</parametername>
</parameternamelist>
<parameterdescription>
<para>The code of the origin vertex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>The code of the destination vertex. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if a path is found, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="417" column="6" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="417" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1aeab2ed9ec5a8977b247fc0de0b0411dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool depthFirstSearchNamesRec</definition>
        <argsstring>(Vertex *g, char *src, char *dest)</argsstring>
        <name>depthFirstSearchNamesRec</name>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Recursively performs a depth-first search on the graph to find a path between two vertices, given their names. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>The head of the vertex list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the source vertex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the destination vertex. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if a path is found, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="448" column="6" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="448" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1af5ba1fa298635549c730b1f281432335" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_best" kindref="compound">Best</ref></type>
        <definition>Best bestPath</definition>
        <argsstring>(Vertex *g, int n, int v)</argsstring>
        <name>bestPath</name>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Finds the shortest path from a given vertex to all other vertices in the graph using Dijkstra&apos;s algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>The head of the vertex list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of vertices in the graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The code of the vertex to start the search from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A struct containing the shortest distance and previous vertex for each vertex in the graph. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="463" column="6" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="463" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1a77ee3a8e94ffffc8866509b0d2736443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void showAllPath</definition>
        <argsstring>(Best b, int n, int v)</argsstring>
        <name>showAllPath</name>
        <param>
          <type><ref refid="struct_best" kindref="compound">Best</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>ShowAllPath - Function that displays the shortest path and distance to all vertices in the graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_best" kindref="compound">Best</ref> struct containing the shortest distance and previous vertex for each vertex in the graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of vertices in the graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the starting vertex </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="540" column="6" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="540" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1ab02145d9bf9a32a12062fcb320adf915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int saveGraph</definition>
        <argsstring>(Vertex *h, char *fileName)</argsstring>
        <name>saveGraph</name>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>SaveGraph - Function that saves the graph to a binary file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Head of the linked list of vertices in the graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the file to save the graph to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: 1 if the graph was successfully saved, -1 if the file could not be opened, -2 if the head of the linked list is NULL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="568" column="5" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="568" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1ae8db4207926f1b116c13b72445acb875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int saveAdj</definition>
        <argsstring>(Adj *h, char *fileName, int codVertexOrigin)</argsstring>
        <name>saveAdj</name>
        <param>
          <type><ref refid="struct_adj" kindref="compound">Adj</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>codVertexOrigin</declname>
        </param>
        <briefdescription>
<para>SaveAdj - Function that saves the adjacency list of a vertex to a binary file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Head of the linked list of adjacent vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the file to save the adjacency list to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codVertexOrigin</parametername>
</parameternamelist>
<parameterdescription>
<para>Code of the vertex that the adjacency list belongs to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: 1 if the adjacency list was successfully saved, -1 if the file could not be opened, -2 if the head of the linked list is NULL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="603" column="5" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="603" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1aa1b1f204441114d6b5bad6387df28a9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
        <definition>Vertex * loadGraph</definition>
        <argsstring>(Vertex *h, char *fileName, bool *res)</argsstring>
        <name>loadGraph</name>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>LoadGraph - Function that loads a graph from a binary file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Head of the linked list of vertices in the graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the file to load the graph from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a boolean variable that will be set to true if the graph was successfully loaded </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: Head of the linked list of vertices in the loaded graph, or NULL if the file could not be opened </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="632" column="8" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="632" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1aa5b4862a92a3141268f21eb64e266a71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
        <definition>Vertex * loadAdj</definition>
        <argsstring>(Vertex *g, bool *res)</argsstring>
        <name>loadAdj</name>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>LoadAdj - Function that loads the adjacency lists of all vertices in a graph from binary files. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Head of the linked list of vertices in the graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a boolean variable that will be set to true if all adjacency lists were successfully loaded </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: Head of the linked list of vertices in the graph with their adjacency lists loaded </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="655" column="8" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="655" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="routes_8c_1a56243cd6d5aeb39369194ea05c3178cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
        <definition>Vertex * routesReadTxt</definition>
        <argsstring>(Vertex *g, bool *res, int *tot)</argsstring>
        <name>routesReadTxt</name>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>tot</declname>
        </param>
        <briefdescription>
<para>Reads the initial data from two text files and creates a graph of routes and edges. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the graph of routes and edges. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a boolean variable that will be set to true if any errors occur during the creation of the graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tot</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an integer variable that will be incremented for each new vertex added to the graph. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the graph of routes and edges. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" line="691" column="8" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c" bodystart="691" bodyend="736"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>File containing the routes functions. </para>
    </briefdescription>
    <detaileddescription>
<para>This file contains the implementation of functions related to the management of routes with graphs</para>
<para><simplesect kind="author"><para>João Pereira </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="routes_8h" kindref="compound">./routes.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>region<sp/>GRAPH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*<ref refid="routes_8c_1a5019e918f68638f5ee193138027405df" kindref="member">createRoute</ref>()</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*<ref refid="routes_8c_1ae87720a58f6d30b7a5ec8c41fe0158e2" kindref="member">createRouteVertex</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*city,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cod)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*)calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_vertex" kindref="compound">Vertex</ref>));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;<ref refid="struct_vertex_1af126ceed259751781ea3b64024138f7d" kindref="member">cod</ref><sp/>=<sp/>cod;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>strcpy(new-&gt;city,<sp/>city);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;adjacents<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*<ref refid="routes_8c_1a6b02bd0cb67e4175a6ff84da2fc20036" kindref="member">insertRouteVertex</ref>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*g,<sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*res)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>g<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>*res<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*aux<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*ant<sp/>=<sp/>aux;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux<sp/>&amp;&amp;<sp/>strcmp(aux-&gt;<ref refid="struct_vertex_1aa95d66244c3d3c01f6c1e8ae63ea123f" kindref="member">city</ref>,<sp/>new-&gt;city)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ant<sp/>=<sp/>aux;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="struct_vertex_1ad959a48c566626429c5091adfbd48bac" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aux<sp/>==<sp/>g)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;<ref refid="struct_vertex_1ad959a48c566626429c5091adfbd48bac" kindref="member">next</ref><sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;<ref refid="struct_vertex_1ad959a48c566626429c5091adfbd48bac" kindref="member">next</ref><sp/>=<sp/>aux;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ant-&gt;<ref refid="struct_vertex_1ad959a48c566626429c5091adfbd48bac" kindref="member">next</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>*res<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="routes_8c_1a09d7bed5e43bd9d16ee464b0e6ef6d7b" kindref="member">showRoutes</ref>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*g)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;V:<sp/>%d<sp/>-<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>g-&gt;<ref refid="struct_vertex_1af126ceed259751781ea3b64024138f7d" kindref="member">cod</ref>,<sp/>g-&gt;<ref refid="struct_vertex_1aa95d66244c3d3c01f6c1e8ae63ea123f" kindref="member">city</ref>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><ref refid="routes_8c_1a6cdcfff755904515945a32bf205656ef" kindref="member">showAdj</ref>(g-&gt;<ref refid="struct_vertex_1aedb112186b8bd0ae14df3a55f7cd90ce" kindref="member">adjacents</ref>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><ref refid="routes_8c_1a09d7bed5e43bd9d16ee464b0e6ef6d7b" kindref="member">showRoutes</ref>(g-&gt;<ref refid="struct_vertex_1ad959a48c566626429c5091adfbd48bac" kindref="member">next</ref>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*<ref refid="routes_8c_1ac08fd85b0e1d73b8e22eec74d0b38185" kindref="member">destroyRoutes</ref>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*g)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*aux<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(g)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g-&gt;<ref refid="struct_vertex_1ad959a48c566626429c5091adfbd48bac" kindref="member">next</ref>)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>g-&gt;<ref refid="struct_vertex_1ad959a48c566626429c5091adfbd48bac" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>g-&gt;<ref refid="struct_vertex_1aedb112186b8bd0ae14df3a55f7cd90ce" kindref="member">adjacents</ref><sp/>=<sp/><ref refid="routes_8c_1a96dc20b046a393d2896ed7e3123a9450" kindref="member">destroyAdj</ref>(g-&gt;<ref refid="struct_vertex_1aedb112186b8bd0ae14df3a55f7cd90ce" kindref="member">adjacents</ref>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>free(g);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>g<sp/>=<sp/>aux;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g;</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="routes_8c_1af9a8d20dbd4301590efe66c09c9cad84" kindref="member">searchCodVertex</ref>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*city)</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(g-&gt;<ref refid="struct_vertex_1aa95d66244c3d3c01f6c1e8ae63ea123f" kindref="member">city</ref>,<sp/>city)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(g-&gt;<ref refid="struct_vertex_1aa95d66244c3d3c01f6c1e8ae63ea123f" kindref="member">city</ref>,<sp/>city)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g-&gt;<ref refid="struct_vertex_1af126ceed259751781ea3b64024138f7d" kindref="member">cod</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="routes_8c_1af9a8d20dbd4301590efe66c09c9cad84" kindref="member">searchCodVertex</ref>(g-&gt;<ref refid="struct_vertex_1ad959a48c566626429c5091adfbd48bac" kindref="member">next</ref>,<sp/>city));</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*<ref refid="routes_8c_1ab70e1129d2c0c8b9ea3dbb7c779505a0" kindref="member">searchVertex</ref>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*city)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(g-&gt;<ref refid="struct_vertex_1aa95d66244c3d3c01f6c1e8ae63ea123f" kindref="member">city</ref>,<sp/>city)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="routes_8c_1ab70e1129d2c0c8b9ea3dbb7c779505a0" kindref="member">searchVertex</ref>(g-&gt;<ref refid="struct_vertex_1ad959a48c566626429c5091adfbd48bac" kindref="member">next</ref>,<sp/>city));</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*<ref refid="routes_8c_1ac54eed9c8e70a3e0ef969900c8872552" kindref="member">searchVertexCod</ref>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cod)</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g-&gt;<ref refid="struct_vertex_1af126ceed259751781ea3b64024138f7d" kindref="member">cod</ref><sp/>==<sp/>cod)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="routes_8c_1ac54eed9c8e70a3e0ef969900c8872552" kindref="member">searchVertexCod</ref>(g-&gt;<ref refid="struct_vertex_1ad959a48c566626429c5091adfbd48bac" kindref="member">next</ref>,<sp/>cod));</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*<ref refid="routes_8c_1a1a8f75be4e9b363d012459131f3d7ada" kindref="member">resetVisitedVertex</ref>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*g)</highlight></codeline>
<codeline lineno="180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*aux<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>aux-&gt;<ref refid="struct_vertex_1a1df99df902f5f6e81ec3e21e9c07360e" kindref="member">visited</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="struct_vertex_1ad959a48c566626429c5091adfbd48bac" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>endregion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>region<sp/>ADJACENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><ref refid="struct_adj" kindref="compound">Adj</ref><sp/>*<ref refid="routes_8c_1a73e20349f3e629ccd24d5b9b7c1e3fad" kindref="member">createAdj</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cod,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>valuedistance)</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><ref refid="struct_adj" kindref="compound">Adj</ref><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/>(<ref refid="struct_adj" kindref="compound">Adj</ref><sp/>*)calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_adj" kindref="compound">Adj</ref>));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;<ref refid="struct_adj_1af126ceed259751781ea3b64024138f7d" kindref="member">cod</ref><sp/>=<sp/>cod;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;dist<sp/>=<sp/>valuedistance;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*<ref refid="routes_8c_1a4994b5d4c5bb2b050655a2d4ef14531b" kindref="member">insertAdjacentVertex</ref>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*origin,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>valuedistance,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*res)</highlight></codeline>
<codeline lineno="223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>region<sp/>Validações</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>*res<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*aux<sp/>=<sp/><ref refid="routes_8c_1ab70e1129d2c0c8b9ea3dbb7c779505a0" kindref="member">searchVertex</ref>(g,<sp/>origin);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cod<sp/>=<sp/><ref refid="routes_8c_1af9a8d20dbd4301590efe66c09c9cad84" kindref="member">searchCodVertex</ref>(g,<sp/>dest);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aux<sp/>==<sp/>NULL<sp/>||<sp/>cod<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="routes_8c_1a2aa41a6a2d3caa6e5e43490c296fb32d" kindref="member">existAdj</ref>(aux-&gt;<ref refid="struct_vertex_1aedb112186b8bd0ae14df3a55f7cd90ce" kindref="member">adjacents</ref>,<sp/>cod)<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>endregion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>region<sp/>Ação</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><ref refid="struct_adj" kindref="compound">Adj</ref><sp/>*newAdj<sp/>=<sp/><ref refid="routes_8c_1a73e20349f3e629ccd24d5b9b7c1e3fad" kindref="member">createAdj</ref>(cod,<sp/>valuedistance);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>aux-&gt;<ref refid="struct_vertex_1aedb112186b8bd0ae14df3a55f7cd90ce" kindref="member">adjacents</ref><sp/>=<sp/><ref refid="routes_8c_1a251a8ffd0dbbbd4c915eecf69eeed000" kindref="member">insertAdj</ref>(aux-&gt;<ref refid="struct_vertex_1aedb112186b8bd0ae14df3a55f7cd90ce" kindref="member">adjacents</ref>,<sp/>newAdj,<sp/>res);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>endregion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*<ref refid="routes_8c_1aabe0b89e10f88f50df9fc6ee273eea38" kindref="member">insertAdjacentVertexCod</ref>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>codOrigin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>codDest,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>valuedistance,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*res)</highlight></codeline>
<codeline lineno="258"><highlight class="normal">{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>*res<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*o<sp/>=<sp/><ref refid="routes_8c_1ac54eed9c8e70a3e0ef969900c8872552" kindref="member">searchVertexCod</ref>(g,<sp/>codOrigin);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*d<sp/>=<sp/><ref refid="routes_8c_1ac54eed9c8e70a3e0ef969900c8872552" kindref="member">searchVertexCod</ref>(g,<sp/>codDest);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(o<sp/>==<sp/>NULL<sp/>||<sp/>d<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="routes_8c_1a2aa41a6a2d3caa6e5e43490c296fb32d" kindref="member">existAdj</ref>(o-&gt;<ref refid="struct_vertex_1aedb112186b8bd0ae14df3a55f7cd90ce" kindref="member">adjacents</ref>,<sp/>codDest)<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><ref refid="struct_adj" kindref="compound">Adj</ref><sp/>*newAdj<sp/>=<sp/><ref refid="routes_8c_1a73e20349f3e629ccd24d5b9b7c1e3fad" kindref="member">createAdj</ref>(codDest,<sp/>valuedistance);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>o-&gt;<ref refid="struct_vertex_1aedb112186b8bd0ae14df3a55f7cd90ce" kindref="member">adjacents</ref><sp/>=<sp/><ref refid="routes_8c_1a251a8ffd0dbbbd4c915eecf69eeed000" kindref="member">insertAdj</ref>(o-&gt;<ref refid="struct_vertex_1aedb112186b8bd0ae14df3a55f7cd90ce" kindref="member">adjacents</ref>,<sp/>newAdj,<sp/>res);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g;</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>region<sp/>GERE_LISTA_ADJACENCIAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="routes_8c_1a2aa41a6a2d3caa6e5e43490c296fb32d" kindref="member">existAdj</ref>(<ref refid="struct_adj" kindref="compound">Adj</ref><sp/>*h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cod)</highlight></codeline>
<codeline lineno="288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h-&gt;<ref refid="struct_adj_1af126ceed259751781ea3b64024138f7d" kindref="member">cod</ref><sp/>==<sp/>cod)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="routes_8c_1a2aa41a6a2d3caa6e5e43490c296fb32d" kindref="member">existAdj</ref>(h-&gt;<ref refid="struct_adj_1ac5792fa79623e519e0e7b6eeeaea2ef4" kindref="member">next</ref>,<sp/>cod);</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><ref refid="struct_adj" kindref="compound">Adj</ref><sp/>*<ref refid="routes_8c_1a251a8ffd0dbbbd4c915eecf69eeed000" kindref="member">insertAdj</ref>(<ref refid="struct_adj" kindref="compound">Adj</ref><sp/>*h,<sp/><ref refid="struct_adj" kindref="compound">Adj</ref><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*res)</highlight></codeline>
<codeline lineno="305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>*res<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="routes_8c_1a2aa41a6a2d3caa6e5e43490c296fb32d" kindref="member">existAdj</ref>(h,<sp/>new-&gt;cod)<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>*res<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;<ref refid="struct_adj_1ac5792fa79623e519e0e7b6eeeaea2ef4" kindref="member">next</ref><sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>h<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="routes_8c_1a6cdcfff755904515945a32bf205656ef" kindref="member">showAdj</ref>(<ref refid="struct_adj" kindref="compound">Adj</ref><sp/>*h)</highlight></codeline>
<codeline lineno="333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\tAdj:<sp/>%d<sp/>-<sp/>(%.0f)\n&quot;</highlight><highlight class="normal">,<sp/>h-&gt;<ref refid="struct_adj_1af126ceed259751781ea3b64024138f7d" kindref="member">cod</ref>,<sp/>h-&gt;<ref refid="struct_adj_1a2578b368dad74bcd4a88bbeeb319a833" kindref="member">dist</ref>);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><ref refid="routes_8c_1a6cdcfff755904515945a32bf205656ef" kindref="member">showAdj</ref>(h-&gt;<ref refid="struct_adj_1ac5792fa79623e519e0e7b6eeeaea2ef4" kindref="member">next</ref>);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><ref refid="struct_adj" kindref="compound">Adj</ref><sp/>*<ref refid="routes_8c_1a96dc20b046a393d2896ed7e3123a9450" kindref="member">destroyAdj</ref>(<ref refid="struct_adj" kindref="compound">Adj</ref><sp/>*h)</highlight></codeline>
<codeline lineno="347"><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><ref refid="struct_adj" kindref="compound">Adj</ref><sp/>*aux<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(h)</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h-&gt;<ref refid="struct_adj_1ac5792fa79623e519e0e7b6eeeaea2ef4" kindref="member">next</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>h-&gt;<ref refid="struct_adj_1ac5792fa79623e519e0e7b6eeeaea2ef4" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>free(h);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>aux;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="routes_8c_1a6dbab8f1d02d69c671fa250132262f4a" kindref="member">countPaths</ref>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pathCount)</highlight></codeline>
<codeline lineno="372"><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src<sp/>==<sp/>dest)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(++pathCount);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*aux<sp/>=<sp/><ref refid="routes_8c_1ac54eed9c8e70a3e0ef969900c8872552" kindref="member">searchVertexCod</ref>(g,<sp/>src);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_adj" kindref="compound">Adj</ref><sp/>*hAdj<sp/>=<sp/>aux-&gt;<ref refid="struct_vertex_1aedb112186b8bd0ae14df3a55f7cd90ce" kindref="member">adjacents</ref>;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(hAdj)</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*v<sp/>=<sp/><ref refid="routes_8c_1ac54eed9c8e70a3e0ef969900c8872552" kindref="member">searchVertexCod</ref>(g,<sp/>hAdj-&gt;<ref refid="struct_adj_1af126ceed259751781ea3b64024138f7d" kindref="member">cod</ref>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pathCount<sp/>=<sp/><ref refid="routes_8c_1a6dbab8f1d02d69c671fa250132262f4a" kindref="member">countPaths</ref>(g,<sp/>v-&gt;<ref refid="struct_vertex_1af126ceed259751781ea3b64024138f7d" kindref="member">cod</ref>,<sp/>dest,<sp/>pathCount);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hAdj<sp/>=<sp/>hAdj-&gt;<ref refid="struct_adj_1ac5792fa79623e519e0e7b6eeeaea2ef4" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pathCount;</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="routes_8c_1a6dc33af1d97003e2d1dd85632d6adf5d" kindref="member">countPathsVertexsName</ref>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pathCount)</highlight></codeline>
<codeline lineno="403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/><ref refid="routes_8c_1af9a8d20dbd4301590efe66c09c9cad84" kindref="member">searchCodVertex</ref>(g,<sp/>src);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/><ref refid="routes_8c_1af9a8d20dbd4301590efe66c09c9cad84" kindref="member">searchCodVertex</ref>(g,<sp/>dest);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="routes_8c_1a6dbab8f1d02d69c671fa250132262f4a" kindref="member">countPaths</ref>(g,<sp/>s,<sp/>d,<sp/>0);</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="routes_8c_1a08d25e7f746a8921ca8c47af9e9bb4c6" kindref="member">depthFirstSearchRec</ref>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>origin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest)</highlight></codeline>
<codeline lineno="418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(origin<sp/>==<sp/>dest)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*aux<sp/>=<sp/><ref refid="routes_8c_1ac54eed9c8e70a3e0ef969900c8872552" kindref="member">searchVertexCod</ref>(g,<sp/>origin);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>aux-&gt;<ref refid="struct_vertex_1a1df99df902f5f6e81ec3e21e9c07360e" kindref="member">visited</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><ref refid="struct_adj" kindref="compound">Adj</ref><sp/>*adj<sp/>=<sp/>aux-&gt;<ref refid="struct_vertex_1aedb112186b8bd0ae14df3a55f7cd90ce" kindref="member">adjacents</ref>;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(adj)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*aux<sp/>=<sp/><ref refid="routes_8c_1ac54eed9c8e70a3e0ef969900c8872552" kindref="member">searchVertexCod</ref>(g,<sp/>adj-&gt;<ref refid="struct_adj_1af126ceed259751781ea3b64024138f7d" kindref="member">cod</ref>);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aux-&gt;<ref refid="struct_vertex_1a1df99df902f5f6e81ec3e21e9c07360e" kindref="member">visited</ref><sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>existes<sp/>=<sp/><ref refid="routes_8c_1a08d25e7f746a8921ca8c47af9e9bb4c6" kindref="member">depthFirstSearchRec</ref>(g,<sp/>adj-&gt;<ref refid="struct_adj_1af126ceed259751781ea3b64024138f7d" kindref="member">cod</ref>,<sp/>dest);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>existes;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="struct_vertex_1ad959a48c566626429c5091adfbd48bac" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="routes_8c_1aeab2ed9ec5a8977b247fc0de0b0411dc" kindref="member">depthFirstSearchNamesRec</ref>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest)</highlight></codeline>
<codeline lineno="449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>o<sp/>=<sp/><ref refid="routes_8c_1af9a8d20dbd4301590efe66c09c9cad84" kindref="member">searchCodVertex</ref>(g,<sp/>src);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/><ref refid="routes_8c_1af9a8d20dbd4301590efe66c09c9cad84" kindref="member">searchCodVertex</ref>(g,<sp/>dest);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="routes_8c_1a08d25e7f746a8921ca8c47af9e9bb4c6" kindref="member">depthFirstSearchRec</ref>(g,<sp/>o,<sp/>d);</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><ref refid="struct_best" kindref="compound">Best</ref><sp/><ref refid="routes_8c_1af5ba1fa298635549c730b1f281432335" kindref="member">bestPath</ref>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v)</highlight></codeline>
<codeline lineno="464"><highlight class="normal">{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cost[<ref refid="routes_8h_1a392fb874e547e582e9c66a08a1f23326" kindref="member">MAX</ref>][<ref refid="routes_8h_1a392fb874e547e582e9c66a08a1f23326" kindref="member">MAX</ref>],<sp/>distance[<ref refid="routes_8h_1a392fb874e547e582e9c66a08a1f23326" kindref="member">MAX</ref>],<sp/>pred[<ref refid="routes_8h_1a392fb874e547e582e9c66a08a1f23326" kindref="member">MAX</ref>];</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>visited[<ref refid="routes_8h_1a392fb874e547e582e9c66a08a1f23326" kindref="member">MAX</ref>],<sp/>count,<sp/>mindistance,<sp/>nextnode,<sp/>i;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>j++)</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cost[i][j]<sp/>=<sp/><ref refid="routes_8h_1a010fa716ced1170c05d8fc9da46a5d34" kindref="member">MAXDISTANCE</ref>;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*aux<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aux-&gt;<ref refid="struct_vertex_1aedb112186b8bd0ae14df3a55f7cd90ce" kindref="member">adjacents</ref>)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_adj" kindref="compound">Adj</ref><sp/>*auxAdj<sp/>=<sp/>aux-&gt;<ref refid="struct_vertex_1aedb112186b8bd0ae14df3a55f7cd90ce" kindref="member">adjacents</ref>;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(auxAdj)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cost[aux-&gt;<ref refid="struct_vertex_1af126ceed259751781ea3b64024138f7d" kindref="member">cod</ref>][auxAdj-&gt;<ref refid="struct_adj_1af126ceed259751781ea3b64024138f7d" kindref="member">cod</ref>]<sp/>=<sp/>auxAdj-&gt;<ref refid="struct_adj_1a2578b368dad74bcd4a88bbeeb319a833" kindref="member">dist</ref>;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxAdj<sp/>=<sp/>auxAdj-&gt;<ref refid="struct_adj_1ac5792fa79623e519e0e7b6eeeaea2ef4" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="struct_vertex_1ad959a48c566626429c5091adfbd48bac" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>aux<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>distance[aux-&gt;<ref refid="struct_vertex_1af126ceed259751781ea3b64024138f7d" kindref="member">cod</ref>]<sp/>=<sp/>cost[v][aux-&gt;<ref refid="struct_vertex_1af126ceed259751781ea3b64024138f7d" kindref="member">cod</ref>];</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>pred[aux-&gt;<ref refid="struct_vertex_1af126ceed259751781ea3b64024138f7d" kindref="member">cod</ref>]<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>visited[aux-&gt;<ref refid="struct_vertex_1af126ceed259751781ea3b64024138f7d" kindref="member">cod</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="struct_vertex_1ad959a48c566626429c5091adfbd48bac" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>distance[v]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>visited[v]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>nextnode<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(count<sp/>&lt;<sp/>n<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>mindistance<sp/>=<sp/><ref refid="routes_8h_1a010fa716ced1170c05d8fc9da46a5d34" kindref="member">MAXDISTANCE</ref>;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance[i]<sp/>&lt;<sp/>mindistance<sp/>&amp;&amp;<sp/>!visited[i])</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mindistance<sp/>=<sp/>distance[i];</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextnode<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>visited[nextnode]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!visited[i])</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mindistance<sp/>+<sp/>cost[nextnode][i]<sp/>&lt;<sp/>distance[i])</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distance[i]<sp/>=<sp/>mindistance<sp/>+<sp/>cost[nextnode][i];</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pred[i]<sp/>=<sp/>nextnode;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><ref refid="struct_best" kindref="compound">Best</ref><sp/>b;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>b.<ref refid="struct_best_1ad8d8c331edd1d4c2f034f542b077887b" kindref="member">befores</ref>[i]<sp/>=<sp/>pred[i];</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>b.<ref refid="struct_best_1a20db43048c55f6037809778aead48e5c" kindref="member">distance</ref>[i]<sp/>=<sp/>distance[i];</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="routes_8c_1a77ee3a8e94ffffc8866509b0d2736443" kindref="member">showAllPath</ref>(<ref refid="struct_best" kindref="compound">Best</ref><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v)</highlight></codeline>
<codeline lineno="541"><highlight class="normal">{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>v)</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nDistancia<sp/>até<sp/>ao<sp/>vertex<sp/>%d<sp/>=<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>b.<ref refid="struct_best_1a20db43048c55f6037809778aead48e5c" kindref="member">distance</ref>[i]);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nPath<sp/>=<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>b.<ref refid="struct_best_1ad8d8c331edd1d4c2f034f542b077887b" kindref="member">befores</ref>[j];</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>&lt;-<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>j);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>!=<sp/>v);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>endregion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>region<sp/>FILES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="routes_8c_1ab02145d9bf9a32a12062fcb320adf915" kindref="member">saveGraph</ref>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*h,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fileName)</highlight></codeline>
<codeline lineno="569"><highlight class="normal">{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>fp<sp/>=<sp/>fopen(fileName,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*aux<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><ref refid="struct_vertex_file" kindref="compound">VertexFile</ref><sp/>auxFile;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>auxFile.<ref refid="struct_vertex_file_1af126ceed259751781ea3b64024138f7d" kindref="member">cod</ref><sp/>=<sp/>aux-&gt;<ref refid="struct_vertex_1af126ceed259751781ea3b64024138f7d" kindref="member">cod</ref>;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(auxFile.<ref refid="struct_vertex_file_1aa95d66244c3d3c01f6c1e8ae63ea123f" kindref="member">city</ref>,<sp/>aux-&gt;<ref refid="struct_vertex_1aa95d66244c3d3c01f6c1e8ae63ea123f" kindref="member">city</ref>);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>fwrite(&amp;auxFile,<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_vertex_file" kindref="compound">VertexFile</ref>),<sp/>fp);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pode<sp/>gravar<sp/>de<sp/>imediato<sp/>as<sp/>adjacencias!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aux-&gt;<ref refid="struct_vertex_1aedb112186b8bd0ae14df3a55f7cd90ce" kindref="member">adjacents</ref>)</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>filePath[100];</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(filePath,<sp/></highlight><highlight class="stringliteral">&quot;./saved-data/vertex-adj/%s.bin&quot;</highlight><highlight class="normal">,<sp/>aux-&gt;<ref refid="struct_vertex_1aa95d66244c3d3c01f6c1e8ae63ea123f" kindref="member">city</ref>);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="routes_8c_1ae8db4207926f1b116c13b72445acb875" kindref="member">saveAdj</ref>(aux-&gt;<ref refid="struct_vertex_1aedb112186b8bd0ae14df3a55f7cd90ce" kindref="member">adjacents</ref>,<sp/>filePath,<sp/>aux-&gt;<ref refid="struct_vertex_1af126ceed259751781ea3b64024138f7d" kindref="member">cod</ref>);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="struct_vertex_1ad959a48c566626429c5091adfbd48bac" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="routes_8c_1ae8db4207926f1b116c13b72445acb875" kindref="member">saveAdj</ref>(<ref refid="struct_adj" kindref="compound">Adj</ref><sp/>*h,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fileName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>codVertexOrigin)</highlight></codeline>
<codeline lineno="604"><highlight class="normal">{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>fp<sp/>=<sp/>fopen(fileName,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><ref refid="struct_adj" kindref="compound">Adj</ref><sp/>*aux<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><ref refid="struct_adj_file" kindref="compound">AdjFile</ref><sp/>auxFile;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux)</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>auxFile.<ref refid="struct_adj_file_1a993972db92bb1646ef99f12bc02b2789" kindref="member">codDestiny</ref><sp/>=<sp/>aux-&gt;<ref refid="struct_adj_1af126ceed259751781ea3b64024138f7d" kindref="member">cod</ref>;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>auxFile.<ref refid="struct_adj_file_1a3f7e074121ff0e7cbe474548c852eee2" kindref="member">codOrigin</ref><sp/>=<sp/>codVertexOrigin;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>auxFile.<ref refid="struct_adj_file_1a8128625c9e3fd04c27b82957732d8781" kindref="member">weight</ref><sp/>=<sp/>aux-&gt;<ref refid="struct_adj_1a2578b368dad74bcd4a88bbeeb319a833" kindref="member">dist</ref>;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>fwrite(&amp;auxFile,<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_adj_file" kindref="compound">AdjFile</ref>),<sp/>fp);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="struct_adj_1ac5792fa79623e519e0e7b6eeeaea2ef4" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*<ref refid="routes_8c_1aa1b1f204441114d6b5bad6387df28a9f" kindref="member">loadGraph</ref>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*h,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fileName,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*res)</highlight></codeline>
<codeline lineno="633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>*res<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>FILE<sp/>*fp<sp/>=<sp/>fopen(fileName,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><ref refid="struct_vertex_file" kindref="compound">VertexFile</ref><sp/>aux;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fread(&amp;aux,<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_vertex_file" kindref="compound">VertexFile</ref>),<sp/>fp))</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/><ref refid="routes_8c_1ae87720a58f6d30b7a5ec8c41fe0158e2" kindref="member">createRouteVertex</ref>(aux.<ref refid="struct_vertex_file_1aa95d66244c3d3c01f6c1e8ae63ea123f" kindref="member">city</ref>,<sp/>aux.<ref refid="struct_vertex_file_1af126ceed259751781ea3b64024138f7d" kindref="member">cod</ref>);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/><ref refid="routes_8c_1a6b02bd0cb67e4175a6ff84da2fc20036" kindref="member">insertRouteVertex</ref>(h,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/>res);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*<ref refid="routes_8c_1aa5b4862a92a3141268f21eb64e266a71" kindref="member">loadAdj</ref>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*res)</highlight></codeline>
<codeline lineno="656"><highlight class="normal">{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>*res<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><ref refid="struct_adj_file" kindref="compound">AdjFile</ref><sp/>aux;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*auxGraph<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(auxGraph)</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>filePath[100];</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(filePath,<sp/></highlight><highlight class="stringliteral">&quot;./saved-data/vertex-adj/%s.bin&quot;</highlight><highlight class="normal">,<sp/>auxGraph-&gt;<ref refid="struct_vertex_1aa95d66244c3d3c01f6c1e8ae63ea123f" kindref="member">city</ref>);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>fp<sp/>=<sp/>fopen(filePath,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fread(&amp;aux,<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_adj_file" kindref="compound">AdjFile</ref>),<sp/>fp))</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/><ref refid="routes_8c_1aabe0b89e10f88f50df9fc6ee273eea38" kindref="member">insertAdjacentVertexCod</ref>(g,<sp/>aux.<ref refid="struct_adj_file_1a3f7e074121ff0e7cbe474548c852eee2" kindref="member">codOrigin</ref>,<sp/>aux.<ref refid="struct_adj_file_1a993972db92bb1646ef99f12bc02b2789" kindref="member">codDestiny</ref>,<sp/>aux.<ref refid="struct_adj_file_1a8128625c9e3fd04c27b82957732d8781" kindref="member">weight</ref>,<sp/>res);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>auxGraph<sp/>=<sp/>auxGraph-&gt;<ref refid="struct_vertex_1ad959a48c566626429c5091adfbd48bac" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g;</highlight></codeline>
<codeline lineno="679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>endregion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*<ref refid="routes_8c_1a56243cd6d5aeb39369194ea05c3178cf" kindref="member">routesReadTxt</ref>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*res,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*tot)</highlight></codeline>
<codeline lineno="692"><highlight class="normal">{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>*res<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>the<sp/>file<sp/>containing<sp/>the<sp/>list<sp/>of<sp/>cities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>fp<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;./initial-data/routes.txt&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>city[100];</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>each<sp/>city<sp/>from<sp/>the<sp/>file<sp/>and<sp/>create<sp/>a<sp/>new<sp/>vertex<sp/>for<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fscanf(fp,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>city)<sp/>!=<sp/>EOF)</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/><ref refid="routes_8c_1ae87720a58f6d30b7a5ec8c41fe0158e2" kindref="member">createRouteVertex</ref>(city,<sp/>*tot);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>g<sp/>=<sp/><ref refid="routes_8c_1a6b02bd0cb67e4175a6ff84da2fc20036" kindref="member">insertRouteVertex</ref>(g,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/>res);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>(*tot)++;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>the<sp/>file<sp/>containing<sp/>the<sp/>list<sp/>of<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>fp<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;./initial-data/edges.txt&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>origin[100],<sp/>dest[100];</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dist;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>each<sp/>edge<sp/>from<sp/>the<sp/>file<sp/>and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fscanf(fp,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%s<sp/>%f&quot;</highlight><highlight class="normal">,<sp/>origin,<sp/>dest,<sp/>&amp;dist)<sp/>!=<sp/>EOF)</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>g<sp/>=<sp/><ref refid="routes_8c_1a4994b5d4c5bb2b050655a2d4ef14531b" kindref="member">insertAdjacentVertex</ref>(g,<sp/>origin,<sp/>dest,<sp/>dist,<sp/>res);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Display<sp/>the<sp/>graph<sp/>of<sp/>routes<sp/>and<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><ref refid="routes_8c_1a09d7bed5e43bd9d16ee464b0e6ef6d7b" kindref="member">showRoutes</ref>(g);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>graph<sp/>of<sp/>routes<sp/>and<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g;</highlight></codeline>
<codeline lineno="736"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/routes.c"/>
  </compounddef>
</doxygen>
