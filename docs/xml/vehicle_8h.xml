<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="vehicle_8h" kind="file" language="C++">
    <compoundname>vehicle.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="routes_8h" local="yes">./routes.h</includes>
    <includedby refid="main_8c" local="yes">/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/main.c</includedby>
    <includedby refid="rentals_8c" local="yes">/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/rentals.c</includedby>
    <includedby refid="rentals_8h" local="yes">/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/rentals.h</includedby>
    <includedby refid="vehicle_8c" local="yes">/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.c</includedby>
    <incdepgraph>
      <node id="6">
        <label>./routes.h</label>
        <link refid="routes_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h</label>
        <link refid="vehicle_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>locale.h</label>
      </node>
      <node id="2">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/main.c</label>
        <link refid="main_8c"/>
      </node>
      <node id="3">
        <label>/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/rentals.c</label>
        <link refid="rentals_8c"/>
      </node>
      <node id="4">
        <label>/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/rentals.h</label>
        <link refid="rentals_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.c</label>
        <link refid="vehicle_8c"/>
      </node>
      <node id="1">
        <label>/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h</label>
        <link refid="vehicle_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_vehicle" prot="public">Vehicle</innerclass>
    <innerclass refid="struct_vehicle_list" prot="public">VehicleList</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="vehicle_8h_1a14e7676fb0bc4b258e56ce36ab3054dc" prot="public" static="no">
        <type>struct <ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref></type>
        <definition>typedef struct VehicleList VehicleList</definition>
        <argsstring></argsstring>
        <name>VehicleList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" line="17" column="26" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="vehicle_8h_1abe36c46f351fd80b9dd6401e7cce0b5d" prot="public" static="no">
        <type>struct <ref refid="struct_vehicle" kindref="compound">Vehicle</ref></type>
        <definition>typedef struct Vehicle Vehicle</definition>
        <argsstring></argsstring>
        <name>Vehicle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" line="27" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="vehicle_8h_1a962372f88de03fcd5581aa44353afec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref> *</type>
        <definition>VehicleList * readVehiclesFromTxt</definition>
        <argsstring>(VehicleList **headNode)</argsstring>
        <name>readVehiclesFromTxt</name>
        <param>
          <type><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref> **</type>
          <declname>headNode</declname>
        </param>
        <briefdescription>
<para>Reads vehicles from a text file and creates a vehicle list. </para>
        </briefdescription>
        <detaileddescription>
<para>This function reads vehicles from a text file and creates a linked list of vehicles. The function takes a pointer to the head node of the list as a parameter and returns the head node.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>headNode</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the head node of the vehicle list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The head node of the vehicle list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" line="35" column="13" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.c" bodystart="29" bodyend="53" declfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" declline="35" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="vehicle_8h_1acc427433abb865212061d5c9aa8e19dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vehicle" kindref="compound">Vehicle</ref> *</type>
        <definition>Vehicle * createVehicle</definition>
        <argsstring>(char *registration, char *type, int battery, int cost, bool isInUse, char *location, Vertex *graph)</argsstring>
        <name>createVehicle</name>
        <param>
          <type>char *</type>
          <declname>registration</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>battery</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cost</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isInUse</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>location</declname>
        </param>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>graph</declname>
          <defname>graf</defname>
        </param>
        <briefdescription>
<para>Creates a vehicle. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a vehicle with the given parameters and returns a pointer to the vehicle.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>registration</parametername>
</parameternamelist>
<parameterdescription>
<para>The registration number of the vehicle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the vehicle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>battery</parametername>
</parameternamelist>
<parameterdescription>
<para>The battery level of the vehicle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cost</parametername>
</parameternamelist>
<parameterdescription>
<para>The cost of the vehicle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isInUse</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean indicating whether the vehicle is in use or not. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>location</parametername>
</parameternamelist>
<parameterdescription>
<para>The location of the vehicle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created vehicle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" line="36" column="9" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.c" bodystart="68" bodyend="86" declfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" declline="36" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="vehicle_8h_1a2f9e802c7e03357a0b24f6e35ae08e2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool createVehicleList</definition>
        <argsstring>(VehicleList **headNode, Vehicle vehicle)</argsstring>
        <name>createVehicleList</name>
        <param>
          <type><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref> **</type>
          <declname>headNode</declname>
        </param>
        <param>
          <type><ref refid="struct_vehicle" kindref="compound">Vehicle</ref></type>
          <declname>vehicle</declname>
        </param>
        <briefdescription>
<para>Creates a vehicle list. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a new node in the vehicle list with the given vehicle and adds it to the head of the list. The function takes a pointer to the head node of the list and the vehicle to be added as parameters. The function returns true if the node was successfully created and added to the list, false otherwise.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>headNode</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the head node of the vehicle list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vehicle</parametername>
</parameternamelist>
<parameterdescription>
<para>The vehicle to be added to the list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the node was successfully created and added to the list, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" line="37" column="6" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.c" bodystart="99" bodyend="112" declfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" declline="37" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vehicle_8h_1a1f861dcfe17198ab1bd092d377c563c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printVehicleList</definition>
        <argsstring>(VehicleList *headNode)</argsstring>
        <name>printVehicleList</name>
        <param>
          <type><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref> *</type>
          <declname>headNode</declname>
        </param>
        <briefdescription>
<para>Prints a vehicle list. </para>
        </briefdescription>
        <detaileddescription>
<para>This function prints the vehicles in the linked list. The function takes a pointer to the head node of the list as a parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>headNode</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the head node of the vehicle list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" line="38" column="6" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.c" bodystart="122" bodyend="138" declfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" declline="38" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vehicle_8h_1a1a12f926cc8099df21bb1f19b140ae43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool editVehicle</definition>
        <argsstring>(VehicleList *headNode, char *registration, Vehicle vehicle)</argsstring>
        <name>editVehicle</name>
        <param>
          <type><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref> *</type>
          <declname>headNode</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>registration</declname>
        </param>
        <param>
          <type><ref refid="struct_vehicle" kindref="compound">Vehicle</ref></type>
          <declname>vehicle</declname>
        </param>
        <briefdescription>
<para>Edits a vehicle in the list. </para>
        </briefdescription>
        <detaileddescription>
<para>This function searches for a vehicle with the given registration number in the list and replaces it with the given vehicle. The function takes a pointer to the head node of the list, the registration number of the vehicle to be edited, and the new vehicle as parameters. The function returns true if the vehicle was successfully edited, false otherwise.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>headNode</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the head node of the vehicle list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>registration</parametername>
</parameternamelist>
<parameterdescription>
<para>The registration number of the vehicle to be edited. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vehicle</parametername>
</parameternamelist>
<parameterdescription>
<para>The new vehicle to replace the old one. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the vehicle was successfully edited, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" line="39" column="6" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.c" bodystart="184" bodyend="197" declfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" declline="39" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vehicle_8h_1aa5187e1606f79dcc2f2ac6f50c9488e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool deleteVehicle</definition>
        <argsstring>(VehicleList **headNode, char *registration)</argsstring>
        <name>deleteVehicle</name>
        <param>
          <type><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref> **</type>
          <declname>headNode</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>registration</declname>
        </param>
        <briefdescription>
<para>Deletes a vehicle from the list. </para>
        </briefdescription>
        <detaileddescription>
<para>This function searches for a vehicle with the given registration number in the list and deletes it. The function takes a pointer to the head node of the list and the registration number of the vehicle to be deleted as parameters. The function returns true if the vehicle was successfully deleted, false otherwise.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>headNode</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the head node of the vehicle list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>registration</parametername>
</parameternamelist>
<parameterdescription>
<para>The registration number of the vehicle to be deleted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the vehicle was successfully deleted, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" line="40" column="6" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.c" bodystart="210" bodyend="233" declfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" declline="40" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vehicle_8h_1abf926983d64d536d6290140eb25af2cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool storeVehicleListInBin</definition>
        <argsstring>(VehicleList *headNode)</argsstring>
        <name>storeVehicleListInBin</name>
        <param>
          <type><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref> *</type>
          <declname>headNode</declname>
        </param>
        <briefdescription>
<para>Stores the vehicle list in a binary file. </para>
        </briefdescription>
        <detaileddescription>
<para>This function stores the vehicles in the linked list in a binary file. The function takes a pointer to the head node of the list as a parameter. The function returns true if the list was successfully stored in the file, false otherwise.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>headNode</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the head node of the vehicle list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the list was successfully stored in the file, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" line="41" column="6" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.c" bodystart="245" bodyend="266" declfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vehicle_8h_1ad5c915a3b01325b4b0c444e5a6d95390" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool searchVehicleByRegistration</definition>
        <argsstring>(VehicleList *headNode, char *registration)</argsstring>
        <name>searchVehicleByRegistration</name>
        <param>
          <type><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref> *</type>
          <declname>headNode</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>registration</declname>
        </param>
        <briefdescription>
<para>Searches for a vehicle by registration number. </para>
        </briefdescription>
        <detaileddescription>
<para>This function searches for a vehicle with the given registration number in the list. The function takes a pointer to the head node of the list and the registration number of the vehicle to be searched as parameters. The function returns true if the vehicle was found, false otherwise.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>headNode</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the head node of the vehicle list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>registration</parametername>
</parameternamelist>
<parameterdescription>
<para>The registration number of the vehicle to be searched. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the vehicle was found, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" line="42" column="6" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.c" bodystart="279" bodyend="291" declfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" declline="42" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vehicle_8h_1ae070c731f906704c4732c31550e6de33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool isVehicleAvailable</definition>
        <argsstring>(VehicleList *headNode, char *registration)</argsstring>
        <name>isVehicleAvailable</name>
        <param>
          <type><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref> *</type>
          <declname>headNode</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>registration</declname>
        </param>
        <briefdescription>
<para>Checks if a vehicle is available. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks if a vehicle with the given registration number is available (not in use). The function takes a pointer to the head node of the list and the registration number of the vehicle to be checked as parameters. The function returns true if the vehicle is available, false otherwise.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>headNode</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the head node of the vehicle list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>registration</parametername>
</parameternamelist>
<parameterdescription>
<para>The registration number of the vehicle to be checked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the vehicle is available, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" line="43" column="6" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.c" bodystart="304" bodyend="319" declfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vehicle_8h_1ae4e0326a3173e078e405a06341910545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool editVehicleAvailability</definition>
        <argsstring>(VehicleList *headNode, char *registration, bool isInUse)</argsstring>
        <name>editVehicleAvailability</name>
        <param>
          <type><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref> *</type>
          <declname>headNode</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>registration</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isInUse</declname>
        </param>
        <briefdescription>
<para>Edits a vehicle&apos;s availability. </para>
        </briefdescription>
        <detaileddescription>
<para>This function searches for a vehicle with the given registration number in the list and sets its availability to the given value. The function takes a pointer to the head node of the list, the registration number of the vehicle to be edited, and a boolean indicating the new availability as parameters. The function returns true if the vehicle&apos;s availability was successfully edited, false otherwise.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>headNode</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the head node of the vehicle list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>registration</parametername>
</parameternamelist>
<parameterdescription>
<para>The registration number of the vehicle to be edited. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isInUse</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean indicating the new availability of the vehicle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the vehicle&apos;s availability was successfully edited, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" line="44" column="6" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.c" bodystart="334" bodyend="347" declfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vehicle_8h_1a79573fa45f9b0c6d508d15c53bfe3184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref> *</type>
        <definition>VehicleList * sortVehicleListDesc</definition>
        <argsstring>(VehicleList **headNode)</argsstring>
        <name>sortVehicleListDesc</name>
        <param>
          <type><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref> **</type>
          <declname>headNode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" line="45" column="13" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.c" bodystart="141" bodyend="170" declfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" declline="45" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="vehicle_8h_1acf84066409b372896f5f76be1f5b45c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * checkVehiclesInRadius</definition>
        <argsstring>(Vertex *g, VehicleList *vl, int city, float radius, char type[])</argsstring>
        <name>checkVehiclesInRadius</name>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref> *</type>
          <declname>vl</declname>
        </param>
        <param>
          <type>int</type>
          <declname>city</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>char</type>
          <declname>type</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>checkVehiclesInRadius - Finds all vehicles of a given type within a certain radius of a city @g: Pointer to the graph of cities and their connections @vl: Pointer to the linked list of vehicles @city: The code of the city to start the search from @radius: The maximum distance from the starting city to search for vehicles @type: The type of vehicle to search for </para>
        </briefdescription>
        <detaileddescription>
<para>This function finds all vehicles of a given type within a certain radius of a city. It starts the search from the specified city and traverses the graph of cities and their connections to find all cities within the given radius. For each city found, it searches the linked list of vehicles to find all vehicles of the given type that are located in that city. It then prints out information about each vehicle found.</para>
<para>Return: NULL </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" line="46" column="6" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.c" bodystart="405" bodyend="439" declfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" declline="46" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vehicle_8h_1aefd22c2a318f5e40dbdd3d6339d4ba28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void markAsVisited</definition>
        <argsstring>(Vertex *graph)</argsstring>
        <name>markAsVisited</name>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
<para>markAsVisited - Marks all nodes in the graph as unvisited @graph: Pointer to the graph of cities and their connections </para>
        </briefdescription>
        <detaileddescription>
<para>This function marks all nodes in the graph as unvisited by setting their visited flag to false.</para>
<para>Return: void </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" line="47" column="6" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.c" bodystart="449" bodyend="457" declfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" declline="47" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vehicle_8h_1ad6e2aee20d6d76e8c5c806293a005b23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void traverseGraph</definition>
        <argsstring>(Vertex *graph, VehicleList *vehicles, Vertex *current_node, float remaining_distance, char type[])</argsstring>
        <name>traverseGraph</name>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref> *</type>
          <declname>vehicles</declname>
        </param>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>current_node</declname>
        </param>
        <param>
          <type>float</type>
          <declname>remaining_distance</declname>
        </param>
        <param>
          <type>char</type>
          <declname>type</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>traverseGraph - Traverses the graph to find all cities within a certain radius @graph: Pointer to the graph of cities and their connections @vehicles: Pointer to the linked list of vehicles @current_node: Pointer to the current node being visited @remaining_distance: The remaining distance that can be traveled from the starting city @type: The type of vehicle to search for </para>
        </briefdescription>
        <detaileddescription>
<para>This function traverses the graph of cities and their connections to find all cities within a certain radius of the starting city. For each city found, it searches the linked list of vehicles to find all vehicles of the given type that are located in that city. It then prints out information about each vehicle found.</para>
<para>Return: void </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" line="48" column="6" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.c" bodystart="473" bodyend="504" declfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" declline="48" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vehicle_8h_1a783a166328fa4a2a53819bf8b360ca0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void showVehicleByTypeOnLocation</definition>
        <argsstring>(VehicleList *head, char location[], char type[])</argsstring>
        <name>showVehicleByTypeOnLocation</name>
        <param>
          <type><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref> *</type>
          <declname>head</declname>
        </param>
        <param>
          <type>char</type>
          <declname>location</declname>
          <array>[]</array>
        </param>
        <param>
          <type>char</type>
          <declname>type</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Searches the linked list of vehicles for all vehicles of a given type in a city @head: Pointer to the head of the linked list of vehicles @location: The name of the city to search for vehicles in @type: The type of vehicle to search for. </para>
        </briefdescription>
        <detaileddescription>
<para>This function searches the linked list of vehicles for all vehicles of a given type that are located in a city with the given name. It then prints out information about each vehicle found.</para>
<para>Return: void </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" line="49" column="6" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.c" bodystart="517" bodyend="544" declfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" declline="49" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vehicle_8h_1a2fe05f7785a38b737d421da08e511e89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref> *</type>
        <definition>VehicleList * recoverTruck</definition>
        <argsstring>(Vertex *graph, VehicleList **vehicle_list, int truck_capacity)</argsstring>
        <name>recoverTruck</name>
        <param>
          <type><ref refid="struct_vertex" kindref="compound">Vertex</ref> *</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref> **</type>
          <declname>vehicle_list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>truck_capacity</declname>
        </param>
        <briefdescription>
<para>recoverTruck - function that recovers eligible vehicles from a graph of nodes @graph: pointer to the first node of the graph @vehicle_list: pointer to the head of the linked list of vehicles @truck_capacity: integer representing the maximum number of vehicles that can be collected in a single run </para>
        </briefdescription>
        <detaileddescription>
<para>This function visits each node in the graph and collects eligible vehicles that are located in the same city as the node. Once the maximum number of vehicles is collected, the function moves the vehicles to the starting node and recharges them. The function returns a pointer to the linked list of collected vehicles.</para>
<para>Return: pointer to the linked list of collected vehicles </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" line="50" column="13" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.c" bodystart="558" bodyend="634" declfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" declline="50" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="vehicle_8h_1a3c4821076839fab7e48392abf34d4db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkIsLegibleForTruck</definition>
        <argsstring>(VehicleList *vehicle)</argsstring>
        <name>checkIsLegibleForTruck</name>
        <param>
          <type><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref> *</type>
          <declname>vehicle</declname>
        </param>
        <briefdescription>
<para>checkIsLegibleForTruck - function that checks if a vehicle is eligible for collection by the truck @vehicle: pointer to the vehicle to be checked </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks if a vehicle is a trotinete, has a battery level below 50, and is not currently rented.</para>
<para>Return: true if the vehicle is eligible, false otherwise </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" line="51" column="6" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.c" bodystart="644" bodyend="652" declfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" declline="51" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vehicle_8h_1a26f2bdaa084b360f603a0bc9334bd0cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool headInsertionVehicleList</definition>
        <argsstring>(VehicleList **head, Vehicle new_vehicle)</argsstring>
        <name>headInsertionVehicleList</name>
        <param>
          <type><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref> **</type>
          <declname>head</declname>
        </param>
        <param>
          <type><ref refid="struct_vehicle" kindref="compound">Vehicle</ref></type>
          <declname>new_vehicle</declname>
        </param>
        <briefdescription>
<para>headInsertionVehicleList - function that inserts a new vehicle at the head of a linked list @head: pointer to the head of the linked list @new_vehicle: the new vehicle to be inserted </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a new node for the new vehicle and inserts it at the head of the linked list.</para>
<para>Return: true if the insertion was successful, false otherwise </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" line="52" column="6" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.c" bodystart="663" bodyend="679" declfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" declline="52" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vehicle_8h_1ae5f10ae9f25a3fb2ea24e8496399a96a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void moveAndRechargeVehicle</definition>
        <argsstring>(VehicleList **vehicles, char vehicle_registration[50], char location[])</argsstring>
        <name>moveAndRechargeVehicle</name>
        <param>
          <type><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref> **</type>
          <declname>vehicles</declname>
        </param>
        <param>
          <type>char</type>
          <declname>vehicle_registration</declname>
          <array>[50]</array>
        </param>
        <param>
          <type>char</type>
          <declname>location</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>moveAndRechargeVehicle - function that moves a vehicle to a new location and recharges its battery @vehicles: pointer to the head of the linked list of vehicles @vehicle_registration: string representing the registration number of the vehicle to be moved @location: string representing the new location of the vehicle </para>
        </briefdescription>
        <detaileddescription>
<para>This function searches for the vehicle with the given registration number in the linked list and updates its location and battery level.</para>
<para>Return: void </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" line="53" column="6" bodyfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.c" bodystart="691" bodyend="706" declfile="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h" declline="53" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>File containing the functions to manage the vehicles. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>João Pereira </para>
</simplesect>
<simplesect kind="date"><para>2023-03-18 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="routes_8h" kindref="compound">./routes.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="vehicle_8h_1a14e7676fb0bc4b258e56ce36ab3054dc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref><sp/><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="struct_vehicle" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_vehicle" kindref="compound">Vehicle</ref></highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21" refid="struct_vehicle_1aaaa75c27dd8d56edcd1cbac0cf8447b9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="struct_vehicle_1aaaa75c27dd8d56edcd1cbac0cf8447b9" kindref="member">registration</ref>[50];</highlight></codeline>
<codeline lineno="22" refid="struct_vehicle_1aab10593edc73627b19ef9de53fd331d2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="struct_vehicle_1aab10593edc73627b19ef9de53fd331d2" kindref="member">type</ref>[50];</highlight></codeline>
<codeline lineno="23" refid="struct_vehicle_1a30edcbc6721c4ee39eaefa55f2c6b0cc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_vehicle_1a30edcbc6721c4ee39eaefa55f2c6b0cc" kindref="member">battery</ref>;</highlight></codeline>
<codeline lineno="24" refid="struct_vehicle_1a66700f11d42fee2413e58dbf49c43ee1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_vehicle_1a66700f11d42fee2413e58dbf49c43ee1" kindref="member">cost</ref>;</highlight></codeline>
<codeline lineno="25" refid="struct_vehicle_1a7f6b14e3e00db83dc6d061d005021cce" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_vehicle_1a7f6b14e3e00db83dc6d061d005021cce" kindref="member">isInUse</ref>;</highlight></codeline>
<codeline lineno="26" refid="struct_vehicle_1a12f443a2876a59dda49bb7d296c40fcd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="struct_vehicle_1a12f443a2876a59dda49bb7d296c40fcd" kindref="member">location</ref>[50];</highlight></codeline>
<codeline lineno="27" refid="vehicle_8h_1abe36c46f351fd80b9dd6401e7cce0b5d" refkind="member"><highlight class="normal">}<sp/><ref refid="struct_vehicle" kindref="compound">Vehicle</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="struct_vehicle_list" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref></highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31" refid="struct_vehicle_list_1a7e67faac7eb0a26632340a79a8f0bf5f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_vehicle" kindref="compound">Vehicle</ref><sp/><ref refid="struct_vehicle_list_1a7e67faac7eb0a26632340a79a8f0bf5f" kindref="member">vehicle</ref>;</highlight></codeline>
<codeline lineno="32" refid="struct_vehicle_list_1a16931b761a6ae7dc99684baed4b50ab3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref><sp/>*<ref refid="struct_vehicle_list_1a16931b761a6ae7dc99684baed4b50ab3" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref><sp/>*<ref refid="vehicle_8h_1a962372f88de03fcd5581aa44353afec6" kindref="member">readVehiclesFromTxt</ref>(<ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref><sp/>**headNode);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="struct_vehicle" kindref="compound">Vehicle</ref><sp/>*<ref refid="vehicle_8h_1acc427433abb865212061d5c9aa8e19dd" kindref="member">createVehicle</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*registration,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>battery,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cost,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isInUse,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*location,<sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*graph);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="vehicle_8h_1a2f9e802c7e03357a0b24f6e35ae08e2a" kindref="member">createVehicleList</ref>(<ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref><sp/>**headNode,<sp/><ref refid="struct_vehicle" kindref="compound">Vehicle</ref><sp/>vehicle);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vehicle_8h_1a1f861dcfe17198ab1bd092d377c563c7" kindref="member">printVehicleList</ref>(<ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref><sp/>*headNode);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="vehicle_8h_1a1a12f926cc8099df21bb1f19b140ae43" kindref="member">editVehicle</ref>(<ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref><sp/>*headNode,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*registration,<sp/><ref refid="struct_vehicle" kindref="compound">Vehicle</ref><sp/>vehicle);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="vehicle_8h_1aa5187e1606f79dcc2f2ac6f50c9488e7" kindref="member">deleteVehicle</ref>(<ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref><sp/>**headNode,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*registration);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="vehicle_8h_1abf926983d64d536d6290140eb25af2cd" kindref="member">storeVehicleListInBin</ref>(<ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref><sp/>*headNode);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="vehicle_8h_1ad5c915a3b01325b4b0c444e5a6d95390" kindref="member">searchVehicleByRegistration</ref>(<ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref><sp/>*headNode,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*registration);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="vehicle_8h_1ae070c731f906704c4732c31550e6de33" kindref="member">isVehicleAvailable</ref>(<ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref><sp/>*headNode,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*registration);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="vehicle_8h_1ae4e0326a3173e078e405a06341910545" kindref="member">editVehicleAvailability</ref>(<ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref><sp/>*headNode,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*registration,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isInUse);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref><sp/>*<ref refid="vehicle_8h_1a79573fa45f9b0c6d508d15c53bfe3184" kindref="member">sortVehicleListDesc</ref>(<ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref><sp/>**headNode);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="vehicle_8h_1acf84066409b372896f5f76be1f5b45c3" kindref="member">checkVehiclesInRadius</ref>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*g,<sp/><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref><sp/>*vl,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>city,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>radius,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type[]);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vehicle_8h_1aefd22c2a318f5e40dbdd3d6339d4ba28" kindref="member">markAsVisited</ref>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*graph);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vehicle_8h_1ad6e2aee20d6d76e8c5c806293a005b23" kindref="member">traverseGraph</ref>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*graph,<sp/><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref><sp/>*vehicles,<sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*current_node,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>remaining_distance,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type[]);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vehicle_8h_1a783a166328fa4a2a53819bf8b360ca0a" kindref="member">showVehicleByTypeOnLocation</ref>(<ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref><sp/>*head,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>location[],<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type[]);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref><sp/>*<ref refid="vehicle_8h_1a2fe05f7785a38b737d421da08e511e89" kindref="member">recoverTruck</ref>(<ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>*graph,<sp/><ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref><sp/>**vehicle_list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>truck_capacity);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="vehicle_8h_1a3c4821076839fab7e48392abf34d4db1" kindref="member">checkIsLegibleForTruck</ref>(<ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref><sp/>*vehicle);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="vehicle_8h_1a26f2bdaa084b360f603a0bc9334bd0cb" kindref="member">headInsertionVehicleList</ref>(<ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref><sp/>**head,<sp/><ref refid="struct_vehicle" kindref="compound">Vehicle</ref><sp/>new_vehicle);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vehicle_8h_1ae5f10ae9f25a3fb2ea24e8496399a96a" kindref="member">moveAndRechargeVehicle</ref>(<ref refid="struct_vehicle_list" kindref="compound">VehicleList</ref><sp/>**vehicles,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>vehicle_registration[50],<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>location[]);</highlight></codeline>
    </programlisting>
    <location file="/Users/inflightit/Desktop/coisas/aula_ead/trabalhoPratico/models/vehicle.h"/>
  </compounddef>
</doxygen>
